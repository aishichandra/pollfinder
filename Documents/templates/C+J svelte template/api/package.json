<script>
  import { onMount } from 'svelte';

  let data = [];
  let filteredData = [];
  let groupedData = {};
  let loading = true;
  let error = null;
  let expandedGroups = {}; // Track which groups are expanded
  
  // Filter controls
  let selectedDate = '';
  let now = new Date();
  let todayString = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}-${String(now.getDate()).padStart(2, '0')}`;
  
  // Initialize with today's date
  selectedDate = todayString;

    function applyDateFilter() {
    if (!selectedDate) {
      filteredData = [...data];
    } else {
      filteredData = data.filter(item => {
        if (!item.added_on) return false;
        
        // Extract date part from added_on field
        const itemDate = item.added_on.split('T')[0]; // Gets YYYY-MM-DD part
        return itemDate === selectedDate;
      });
    }
    
    console.log(`📅 Date filter: ${selectedDate || 'All dates'} - Found ${filteredData.length} items`);
    groupDataByGroupId();
  }

  function groupDataByGroupId() {
    groupedData = {};
    
    filteredData.forEach(item => {
      const groupId = item.group_id || 'ungrouped';
      if (!groupedData[groupId]) {
        groupedData[groupId] = [];
      }
      groupedData[groupId].push(item);
    });

    // Initialize expanded groups for all new groups
    Object.keys(groupedData).forEach(groupId => {
      if (!(groupId in expandedGroups)) {
        expandedGroups[groupId] = true;
      }
    });
    
    console.log('📊 Grouped data:', Object.keys(groupedData).map(key => ({ 
      group: key, 
      count: groupedData[key].length 
    })));
  }

  function toggleGroup(groupId) {
    expandedGroups[groupId] = !expandedGroups[groupId];
    expandedGroups = {...expandedGroups}; // Trigger reactivity
  }

  function expandAll() {
    Object.keys(groupedData).forEach(groupId => {
      expandedGroups[groupId] = true;
    });
    expandedGroups = {...expandedGroups};
  }

  function collapseAll() {
    Object.keys(groupedData).forEach(groupId => {
      expandedGroups[groupId] = false;
    });
    expandedGroups = {...expandedGroups};
  }

  onMount(async () => {
    const apiUrl = 'https://pollfinderpdfs.s3.us-east-2.amazonaws.com/pollfinder/grouped_today_df.json';
    console.log('🚀 Fetching data from:', apiUrl);
    
    try {
      const response = await fetch(apiUrl);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const rawText = await response.text();
      console.log('📥 Raw response length:', rawText.length);
      
      // Try parsing as JSON first, then as JSONL
      try {
        data = JSON.parse(rawText);
        console.log('✅ Parsed as JSON - Found', data.length, 'items');
      } catch {
        // Parse as JSONL (line-by-line JSON)
        data = rawText
          .split('\n')
          .filter(line => line.trim())
          .map(line => {
            try {
              return JSON.parse(line);
            } catch {
              return null;
            }
          })
          .filter(Boolean);
        console.log('✅ Parsed as JSONL - Found', data.length, 'items');
      }

      if (data.length > 0) {
        console.log('📊 Sample data item:', data[0]);
        console.log('📋 Available fields:', Object.keys(data[0]));
        applyDateFilter(); // Apply initial filter
      }
      
      loading = false;
      
    } catch (err) {
      console.error('❌ Error fetching data:', err);
      error = err.message;
      loading = false;
    }
  });

  // Reactive statement to apply filter when date changes
  $: if (data.length > 0 && selectedDate !== undefined) {
    applyDateFilter();
  }

</script>

<main class="container">
  <h1>Poll Detector Data</h1>
  
  {#if loading}
    <p>Loading data from S3...</p>
  {:else if error}
    <div class="error">
      <h2>Error loading data:</h2>
      <p>{error}</p>
    </div>
  {:else if data.length > 0}
    <div class="data-info">
      <p><strong>Total records:</strong> {data.length}</p>
      <p><strong>Filtered records:</strong> {filteredData.length}</p>
      <p><strong>Number of groups:</strong> {Object.keys(groupedData).length}</p>
      <p><strong>Sample fields:</strong> {Object.keys(data[0]).join(', ')}</p>
      
      <div class="filter-section">
        <label for="date-filter" class="filter-label">Filter by Added On Date:</label>
        <input 
          id="date-filter"
          type="date" 
          bind:value={selectedDate}
          class="date-input"
        />
        <button on:click={() => selectedDate = ''} class="clear-btn">Show All Dates</button>
      </div>
      
      <div class="controls">
        <button on:click={expandAll} class="control-btn">Expand All</button>
        <button on:click={collapseAll} class="control-btn">Collapse All</button>
      </div>
    </div>
    
    <!-- Create a collapsible table for each group -->
    {#each Object.entries(groupedData) as [groupId, groupItems]}
      <div class="group-section">
        <h2 class="group-title" 
            on:click={() => toggleGroup(groupId)}
            on:keydown={(e) => e.key === 'Enter' && toggleGroup(groupId)}
            tabindex="0"
            role="button"
            aria-expanded={expandedGroups[groupId]}>
          <span class="expand-icon" class:expanded={expandedGroups[groupId]}>
            {expandedGroups[groupId] ? '▼' : '▶'}
          </span>
          Group: {groupId} 
          <span class="group-count">({groupItems.length} items)</span>
        </h2>
        
        {#if expandedGroups[groupId]}
          <div class="table-container">
            <table>
              <thead>
                <tr>
                  {#each Object.keys(data[0]) as field}
                    <th>{field}</th>
                  {/each}
                </tr>
              </thead>
              <tbody>
                {#each groupItems as item}
                  <tr>
                    {#each Object.keys(data[0]) as field}
                      <td>
                        {#if field === 'url' && item[field]}
                          <a href={item[field]} target="_blank" rel="noopener noreferrer">{item[field]}</a>
                        {:else if field === 'added_on' && item[field]}
                          {new Date(item[field]).toLocaleString()}
                        {:else}
                          {item[field] || ''}
                        {/if}
                      </td>
                    {/each}
                  </tr>
                {/each}
              </tbody>
            </table>
          </div>
        {/if}
      </div>
    {/each}
  {:else}
    <p>No data found.</p>
  {/if}
</main>

<style>
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
    font-family: Arial, sans-serif;
  }

  h1 {
    color: #333;
    text-align: center;
    margin-bottom: 30px;
  }

  .data-info {
    background: #f5f5f5;
    padding: 15px;
    border-radius: 5px;
    margin-bottom: 20px;
  }

  .data-info p {
    margin: 5px 0;
  }

  .filter-section {
    margin: 15px 0;
    padding: 15px;
    background: #f8f9fa;
    border-radius: 5px;
    border: 1px solid #dee2e6;
    display: flex;
    align-items: center;
    gap: 10px;
    flex-wrap: wrap;
  }

  .filter-label {
    font-weight: bold;
    color: #495057;
  }

  .date-input {
    padding: 8px 12px;
    border: 1px solid #ced4da;
    border-radius: 4px;
    font-size: 14px;
    background: white;
  }

  .date-input:focus {
    outline: none;
    border-color: #007bff;
    box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
  }

  .clear-btn {
    background: #6c757d;
    color: white;
    border: none;
    padding: 8px 12px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.2s ease;
  }

  .clear-btn:hover {
    background: #545b62;
  }

  .controls {
    margin-top: 15px;
    display: flex;
    gap: 10px;
  }

  .control-btn {
    background: #007bff;
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.2s ease;
  }

  .control-btn:hover {
    background: #0056b3;
  }

  .control-btn:active {
    transform: translateY(1px);
  }

  .error {
    background: #ffe6e6;
    border: 1px solid #ff9999;
    padding: 15px;
    border-radius: 5px;
    color: #cc0000;
  }

  .table-container {
    overflow-x: auto;
    border: 1px solid #ddd;
    border-radius: 5px;
  }

  table {
    width: 100%;
    border-collapse: collapse;
  }

  th {
    background: #f8f9fa;
    font-weight: bold;
    padding: 12px 8px;
    text-align: left;
    border-bottom: 2px solid #dee2e6;
    position: sticky;
    top: 0;
  }

  td {
    padding: 8px;
    border-bottom: 1px solid #dee2e6;
    vertical-align: top;
  }

  tr:hover {
    background: #f8f9fa;
  }

  a {
    color: #007bff;
    text-decoration: none;
    word-break: break-all;
  }

  a:hover {
    text-decoration: underline;
  }

  .group-section {
    margin-bottom: 40px;
    border: 1px solid #ddd;
    border-radius: 8px;
    overflow: hidden;
  }

  .group-title {
    background: #e9ecef;
    padding: 15px 20px;
    margin: 0;
    font-size: 1.2em;
    color: #495057;
    border-bottom: 1px solid #ddd;
    cursor: pointer;
    user-select: none;
    display: flex;
    align-items: center;
    transition: background-color 0.2s ease;
  }

  .group-title:hover {
    background: #dee2e6;
  }

  .expand-icon {
    margin-right: 10px;
    font-size: 0.8em;
    transition: transform 0.2s ease;
    color: #6c757d;
  }

  .expand-icon.expanded {
    transform: rotate(0deg);
  }

  .group-count {
    font-weight: normal;
    color: #6c757d;
    font-size: 0.9em;
    margin-left: auto;
  }

  .group-section .table-container {
    border: none;
    border-radius: 0;
  }

  .group-section table {
    margin: 0;
  }

  .group-section th {
    background: #f8f9fa;
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .container {
      padding: 10px;
    }
    
    th, td {
      padding: 6px 4px;
      font-size: 14px;
    }

    .group-title {
      padding: 10px 15px;
      font-size: 1.1em;
    }
  }
</style>
